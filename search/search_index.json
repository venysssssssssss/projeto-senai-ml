{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Resumo do Projeto de Predi\u00e7\u00e3o de Pre\u00e7os de Barcos","text":"<p>Este projeto envolve o desenvolvimento de um pipeline de machine learning para a predi\u00e7\u00e3o de pre\u00e7os de barcos com base em diferentes caracter\u00edsticas. O projeto abrange desde a gera\u00e7\u00e3o dos datasets, passando pelo treinamento e avalia\u00e7\u00e3o do modelo, at\u00e9 a visualiza\u00e7\u00e3o dos resultados. A seguir, s\u00e3o descritas as principais etapas e componentes do projeto.</p>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<ol> <li>Gera\u00e7\u00e3o de Dados</li> <li>Utiliza a biblioteca Faker para gerar datasets fict\u00edcios que simulam caracter\u00edsticas de barcos, como material, tipo de venda, tipo de barco, comprimento, largura, peso e pre\u00e7o.</li> <li> <p>Os dados s\u00e3o divididos em conjuntos de treino e teste, conforme especificado nas configura\u00e7\u00f5es.</p> </li> <li> <p>Pr\u00e9-processamento e Treinamento</p> </li> <li>Os dados gerados s\u00e3o pr\u00e9-processados para serem utilizados no treinamento do modelo.</li> <li>Um modelo de regress\u00e3o baseado em \u00e1rvore de decis\u00e3o \u00e9 treinado utilizando <code>GridSearchCV</code> para otimiza\u00e7\u00e3o dos hiperpar\u00e2metros.</li> <li> <p>O modelo treinado \u00e9 salvo para uso posterior.</p> </li> <li> <p>Avalia\u00e7\u00e3o do Modelo</p> </li> <li>O modelo \u00e9 avaliado usando m\u00e9tricas como Mean Absolute Error (MAE), Mean Squared Error (MSE), e R\u00b2.</li> <li> <p>As m\u00e9tricas de desempenho s\u00e3o registradas para an\u00e1lise.</p> </li> <li> <p>Visualiza\u00e7\u00e3o</p> </li> <li>Gr\u00e1ficos s\u00e3o gerados para visualizar a rela\u00e7\u00e3o entre os valores reais e preditos, a distribui\u00e7\u00e3o dos res\u00edduos, e a import\u00e2ncia das features.</li> </ol>"},{"location":"#configuracoes","title":"Configura\u00e7\u00f5es","text":"<p>As principais configura\u00e7\u00f5es do projeto s\u00e3o gerenciadas por meio de um arquivo <code>config.yaml</code>, que permite f\u00e1cil modifica\u00e7\u00e3o dos par\u00e2metros de gera\u00e7\u00e3o de dados, caminhos para salvar o modelo, e configura\u00e7\u00f5es de logging. Isso inclui:</p> <ul> <li>N\u00famero de amostras e tamanho do conjunto de teste.</li> <li>Caminho para salvar o modelo treinado.</li> <li>Arquivo de log para registrar as atividades do pipeline.</li> </ul>"},{"location":"#objetivos-do-projeto","title":"Objetivos do Projeto","text":"<ul> <li>Desenvolver um pipeline automatizado para predi\u00e7\u00e3o de pre\u00e7os de barcos.</li> <li>Garantir reprodutibilidade atrav\u00e9s do uso de <code>random_state</code> em opera\u00e7\u00f5es aleat\u00f3rias.</li> <li>Facilitar a an\u00e1lise do modelo atrav\u00e9s de visualiza\u00e7\u00f5es intuitivas.</li> </ul>"},{"location":"#principais-tecnologias-utilizadas","title":"Principais Tecnologias Utilizadas","text":"<ul> <li>Python: Linguagem principal do projeto.</li> <li>Scikit-learn: Utilizada para o pr\u00e9-processamento dos dados, treinamento do modelo e avalia\u00e7\u00e3o.</li> <li>Faker: Para gera\u00e7\u00e3o de dados sint\u00e9ticos.</li> <li>Matplotlib e Seaborn: Para visualiza\u00e7\u00e3o dos resultados.</li> <li>YAML: Para gest\u00e3o das configura\u00e7\u00f5es do projeto.</li> </ul>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Este projeto fornece uma abordagem completa para desenvolver um modelo de machine learning capaz de prever pre\u00e7os de barcos, desde a cria\u00e7\u00e3o de datasets sint\u00e9ticos at\u00e9 a avalia\u00e7\u00e3o e visualiza\u00e7\u00e3o dos resultados. A modularidade e a configura\u00e7\u00e3o flex\u00edvel tornam o pipeline f\u00e1cil de adaptar para outros problemas de regress\u00e3o.</p>"},{"location":"config/","title":"Configura\u00e7\u00e3o Avan\u00e7ada","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para o conte\u00fado do arquivo <code>config.yaml</code> que voc\u00ea forneceu:</p>"},{"location":"config/#arquivo-de-configuracao-configyaml","title":"Arquivo de Configura\u00e7\u00e3o (<code>config.yaml</code>)","text":"<p>Este arquivo de configura\u00e7\u00e3o em formato YAML \u00e9 usado para definir os par\u00e2metros principais do pipeline de machine learning, incluindo a configura\u00e7\u00e3o dos dados, o modelo, e o sistema de logging.</p>"},{"location":"config/#estrutura-do-arquivo","title":"Estrutura do Arquivo","text":""},{"location":"config/#data","title":"<code>data</code>","text":"<pre><code>data:\n  num_samples: 1000\n  test_size: 0.2\n  random_state: 42\n</code></pre> <p>Descri\u00e7\u00e3o: A se\u00e7\u00e3o <code>data</code> cont\u00e9m as configura\u00e7\u00f5es relacionadas \u00e0 gera\u00e7\u00e3o e manipula\u00e7\u00e3o dos datasets.</p> <ul> <li><code>num_samples</code> (<code>int</code>): N\u00famero de amostras a serem geradas para o dataset de treino.</li> <li><code>test_size</code> (<code>float</code>): Propor\u00e7\u00e3o do dataset total que ser\u00e1 usada como conjunto de teste. Por exemplo, <code>0.2</code> indica que 20% dos dados ser\u00e3o usados para teste.</li> <li><code>random_state</code> (<code>int</code>): Valor utilizado para inicializar o gerador interno de n\u00fameros aleat\u00f3rios. Isso \u00e9 importante para garantir a reprodutibilidade dos resultados, assegurando que os mesmos valores aleat\u00f3rios sejam gerados sempre que o c\u00f3digo for executado com o mesmo <code>random_state</code>.</li> </ul>"},{"location":"config/#model","title":"<code>model</code>","text":"<pre><code>model:\n  save_path: \"models/boat_price_prediction_model.pkl\"\n</code></pre> <p>Descri\u00e7\u00e3o: A se\u00e7\u00e3o <code>model</code> define onde o modelo treinado ser\u00e1 salvo.</p> <ul> <li><code>save_path</code> (<code>str</code>): Caminho onde o modelo treinado ser\u00e1 salvo. Neste exemplo, o modelo ser\u00e1 salvo como <code>boat_price_prediction_model.pkl</code> dentro da pasta <code>models</code>.</li> </ul>"},{"location":"config/#logging","title":"<code>logging</code>","text":"<pre><code>logging:\n  log_file: \"logs/project.log\"\n</code></pre> <p>Descri\u00e7\u00e3o: A se\u00e7\u00e3o <code>logging</code> define a configura\u00e7\u00e3o para o sistema de registro de logs.</p> <ul> <li><code>log_file</code> (<code>str</code>): Caminho para o arquivo de log onde todas as mensagens e informa\u00e7\u00f5es do processo ser\u00e3o registradas. Neste exemplo, os logs ser\u00e3o armazenados no arquivo <code>project.log</code> dentro da pasta <code>logs</code>.</li> </ul>"},{"location":"config/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Modifica\u00e7\u00f5es F\u00e1ceis: O uso de um arquivo YAML para configura\u00e7\u00f5es permite modificar par\u00e2metros importantes do pipeline sem necessidade de alterar o c\u00f3digo-fonte diretamente.</li> <li>Reprodutibilidade: O par\u00e2metro <code>random_state</code> \u00e9 crucial para garantir que os resultados sejam reprodut\u00edveis, facilitando a an\u00e1lise e compara\u00e7\u00e3o de resultados entre diferentes execu\u00e7\u00f5es.</li> <li>Organiza\u00e7\u00e3o: Separar as configura\u00e7\u00f5es de dados, modelo, e logging ajuda a manter o c\u00f3digo organizado e mais f\u00e1cil de manter.</li> </ul> <p>Esse arquivo <code>config.yaml</code> \u00e9 uma pe\u00e7a fundamental para a flexibilidade e reprodutibilidade do pipeline de machine learning, permitindo ajustes r\u00e1pidos e seguros nas principais configura\u00e7\u00f5es do projeto.</p>"},{"location":"config_loader/","title":"Configura\u00e7\u00e3o de Carregamento","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para a fun\u00e7\u00e3o <code>load_config</code>:</p>"},{"location":"config_loader/#funcao-load_config","title":"Fun\u00e7\u00e3o <code>load_config</code>","text":"<pre><code>import yaml\n\ndef load_config(config_path):\n    with open(config_path, 'r') as file:\n        config = yaml.safe_load(file)\n    return config\n</code></pre>"},{"location":"config_loader/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A fun\u00e7\u00e3o <code>load_config</code> carrega e retorna o conte\u00fado de um arquivo de configura\u00e7\u00e3o no formato YAML. </p>"},{"location":"config_loader/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>config_path</code> (<code>str</code>): Caminho para o arquivo de configura\u00e7\u00e3o YAML. Este par\u00e2metro deve ser uma string que representa o caminho do arquivo que cont\u00e9m as configura\u00e7\u00f5es.</li> </ul>"},{"location":"config_loader/#retorno","title":"Retorno","text":"<ul> <li><code>config</code> (<code>dict</code>): Um dicion\u00e1rio Python contendo os dados carregados do arquivo YAML. Cada chave no dicion\u00e1rio corresponde a uma chave no arquivo YAML, e os valores correspondem aos valores associados a essas chaves.</li> </ul>"},{"location":"config_loader/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code># Exemplo de uso da fun\u00e7\u00e3o load_config\n\nconfig_path = \"config.yaml\"\nconfig = load_config(config_path)\n\n# Acessando um valor espec\u00edfico no dicion\u00e1rio de configura\u00e7\u00e3o\napi_key = config[\"api_key\"]\n</code></pre>"},{"location":"config_loader/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Erros Potenciais: Se o arquivo especificado em <code>config_path</code> n\u00e3o existir ou n\u00e3o for um arquivo YAML v\u00e1lido, a fun\u00e7\u00e3o pode levantar exce\u00e7\u00f5es (<code>FileNotFoundError</code>, <code>yaml.YAMLError</code>).</li> <li>Seguran\u00e7a: A fun\u00e7\u00e3o utiliza <code>yaml.safe_load</code>, que \u00e9 uma maneira segura de carregar dados YAML, protegendo contra a execu\u00e7\u00e3o de c\u00f3digo arbitr\u00e1rio em caso de arquivos YAML maliciosos. ```</li> </ul>"},{"location":"config_loader/#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<ul> <li>Descri\u00e7\u00e3o: Explica o prop\u00f3sito da fun\u00e7\u00e3o.</li> <li>Par\u00e2metros: Detalha os par\u00e2metros que a fun\u00e7\u00e3o recebe.</li> <li>Retorno: Descreve o que a fun\u00e7\u00e3o retorna.</li> <li>Exemplo de Uso: Um exemplo pr\u00e1tico de como a fun\u00e7\u00e3o pode ser utilizada.</li> <li>Considera\u00e7\u00f5es: Informa\u00e7\u00f5es adicionais sobre poss\u00edveis erros e pr\u00e1ticas de seguran\u00e7a.</li> </ul>"},{"location":"data_generation/","title":"M\u00f3dulo para Gera\u00e7\u00e3o dos Datasets de Treino e Teste","text":"<p>Este m\u00f3dulo utiliza a biblioteca Faker para gerar datasets de treino e teste com dados fict\u00edcios de barcos. A configura\u00e7\u00e3o do m\u00f3dulo \u00e9 feita atrav\u00e9s de um arquivo YAML.</p>"},{"location":"data_generation/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"data_generation/#carregar_config","title":"<code>carregar_config</code>","text":"<pre><code>def carregar_config(config_path: str) -&gt; dict:\n    \"\"\"\n    Carrega as configura\u00e7\u00f5es do arquivo YAML.\n\n    Args:\n        config_path (str): Caminho para o arquivo de configura\u00e7\u00e3o YAML.\n\n    Returns:\n        dict: Dicion\u00e1rio com as configura\u00e7\u00f5es carregadas.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Carrega e retorna as configura\u00e7\u00f5es a partir de um arquivo YAML.</p> <p>Par\u00e2metros: - <code>config_path</code> (<code>str</code>): Caminho para o arquivo de configura\u00e7\u00e3o YAML.</p> <p>Retorno: - <code>dict</code>: Dicion\u00e1rio contendo as configura\u00e7\u00f5es carregadas.</p> <p>Exemplo de Uso:</p> <pre><code>config = carregar_config(\"config/config.yaml\")\n</code></pre>"},{"location":"data_generation/#gerar_dataset","title":"<code>gerar_dataset</code>","text":"<pre><code>def gerar_dataset(n_amostras: int) -&gt; pd.DataFrame:\n    \"\"\"\n    Gera um dataset falso com n_amostras amostras.\n\n    Args:\n        n_amostras (int): N\u00famero de amostras a serem geradas.\n\n    Returns:\n        pd.DataFrame: DataFrame contendo o dataset gerado.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Gera um dataset fict\u00edcio com o n\u00famero especificado de amostras. O dataset cont\u00e9m informa\u00e7\u00f5es sobre diferentes tipos de barcos.</p> <p>Par\u00e2metros: - <code>n_amostras</code> (<code>int</code>): N\u00famero de amostras a serem geradas.</p> <p>Retorno: - <code>pd.DataFrame</code>: DataFrame contendo o dataset gerado.</p> <p>Exemplo de Uso:</p> <pre><code>dataset = gerar_dataset(100)\n</code></pre>"},{"location":"data_generation/#salvar_dataset","title":"<code>salvar_dataset</code>","text":"<pre><code>def salvar_dataset(dataset: pd.DataFrame, nome_arquivo: str):\n    \"\"\"\n    Salva o dataset em um arquivo CSV.\n\n    Args:\n        dataset (pd.DataFrame): DataFrame contendo o dataset a ser salvo.\n        nome_arquivo (str): Nome do arquivo onde o dataset ser\u00e1 salvo.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Salva o dataset gerado em um arquivo CSV.</p> <p>Par\u00e2metros: - <code>dataset</code> (<code>pd.DataFrame</code>): DataFrame contendo o dataset a ser salvo. - <code>nome_arquivo</code> (<code>str</code>): Nome do arquivo onde o dataset ser\u00e1 salvo.</p> <p>Exemplo de Uso:</p> <pre><code>salvar_dataset(dataset, \"data/dataset_treino.csv\")\n</code></pre>"},{"location":"data_generation/#exemplo-completo-de-uso-do-modulo","title":"Exemplo Completo de Uso do M\u00f3dulo","text":"<pre><code>if __name__ == \"__main__\":\n    config = carregar_config(\"config/config.yaml\")\n\n    logging.basicConfig(filename=config['logging']['log_file'], level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n    n_amostras = config['data']['num_samples']\n    dataset_treino = gerar_dataset(n_amostras)\n    dataset_teste = gerar_dataset(int(n_amostras * config['data']['test_size']))\n\n    salvar_dataset(dataset_treino, \"data/dataset_treino.csv\")\n    salvar_dataset(dataset_teste, \"data/dataset_teste.csv\")\n\n    logging.info(\"Datasets de treino e teste gerados e salvos com sucesso.\")\n</code></pre> <p>Descri\u00e7\u00e3o: Este bloco de c\u00f3digo representa o uso completo do m\u00f3dulo, onde as configura\u00e7\u00f5es s\u00e3o carregadas, os datasets de treino e teste s\u00e3o gerados e salvos, e uma mensagem de sucesso \u00e9 registrada no log.</p>"},{"location":"data_generation/#configuracao-yaml-exemplo","title":"Configura\u00e7\u00e3o YAML Exemplo","text":"<p>Abaixo est\u00e1 um exemplo de como o arquivo <code>config.yaml</code> poderia ser estruturado:</p> <pre><code>logging:\n  log_file: \"logs/project.log\"\n\ndata:\n  num_samples: 1000\n  test_size: 0.2\n</code></pre>"},{"location":"data_generation/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Bibliotecas Utilizadas:</li> <li><code>pandas</code>: Para manipula\u00e7\u00e3o de dados e cria\u00e7\u00e3o de DataFrames.</li> <li><code>faker</code>: Para gera\u00e7\u00e3o de dados fict\u00edcios.</li> <li><code>yaml</code>: Para leitura das configura\u00e7\u00f5es em YAML.</li> <li><code>logging</code>: Para registro de logs.</li> <li> <p><code>random</code>: Para gera\u00e7\u00e3o de valores aleat\u00f3rios.</p> </li> <li> <p>Erros Potenciais:   Certifique-se de que o caminho para o arquivo YAML esteja correto e que o arquivo seja v\u00e1lido para evitar erros ao carregar as configura\u00e7\u00f5es.</p> </li> </ul>"},{"location":"data_preparation/","title":"Prepara\u00e7\u00e3o de Dados","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para a fun\u00e7\u00e3o <code>prepare_data</code>:</p>"},{"location":"data_preparation/#funcao-prepare_data","title":"Fun\u00e7\u00e3o <code>prepare_data</code>","text":"<pre><code>from sklearn.model_selection import train_test_split\n\ndef prepare_data(df, test_size, random_state):\n    \"\"\"Prepara os dados para treinamento, separando as vari\u00e1veis dependentes e independentes e dividindo em conjuntos de treino e teste.\"\"\"\n    X = df[['Year']]\n    y = df['Price']\n    return train_test_split(X, y, test_size=test_size, random_state=random_state)\n</code></pre>"},{"location":"data_preparation/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A fun\u00e7\u00e3o <code>prepare_data</code> prepara os dados para treinamento de um modelo de machine learning. Ela separa as vari\u00e1veis dependentes e independentes do DataFrame e, em seguida, divide os dados em conjuntos de treino e teste.</p>"},{"location":"data_preparation/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>df</code> (<code>pandas.DataFrame</code>): DataFrame contendo os dados a serem preparados. Deve conter pelo menos as colunas <code>Year</code> e <code>Price</code>.</li> <li><code>test_size</code> (<code>float</code>): Propor\u00e7\u00e3o do dataset que ser\u00e1 usado como conjunto de teste. O valor deve estar entre 0.0 e 1.0.</li> <li><code>random_state</code> (<code>int</code>): Semente aleat\u00f3ria para garantir que a divis\u00e3o dos dados seja reproduz\u00edvel.</li> </ul>"},{"location":"data_preparation/#retorno","title":"Retorno","text":"<ul> <li><code>X_train</code> (<code>pandas.DataFrame</code>): Subconjunto de treino das vari\u00e1veis independentes.</li> <li><code>X_test</code> (<code>pandas.DataFrame</code>): Subconjunto de teste das vari\u00e1veis independentes.</li> <li><code>y_train</code> (<code>pandas.Series</code>): Subconjunto de treino das vari\u00e1veis dependentes.</li> <li><code>y_test</code> (<code>pandas.Series</code>): Subconjunto de teste das vari\u00e1veis dependentes.</li> </ul>"},{"location":"data_preparation/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code>import pandas as pd\n\n# Exemplo de dataset\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004],\n    'Price': [10000, 15000, 20000, 25000, 30000]\n}\n\ndf = pd.DataFrame(data)\n\n# Preparar os dados para treino e teste\nX_train, X_test, y_train, y_test = prepare_data(df, test_size=0.2, random_state=42)\n\nprint(X_train)\nprint(X_test)\nprint(y_train)\nprint(y_test)\n</code></pre>"},{"location":"data_preparation/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Dados de Entrada: Certifique-se de que o DataFrame <code>df</code> cont\u00e9m as colunas <code>Year</code> e <code>Price</code>, pois estas s\u00e3o as colunas utilizadas na separa\u00e7\u00e3o das vari\u00e1veis dependentes e independentes.</li> <li>Divis\u00e3o dos Dados: A fun\u00e7\u00e3o utiliza <code>train_test_split</code> da biblioteca <code>sklearn</code>, que \u00e9 uma forma padr\u00e3o de dividir os dados para treino e teste, garantindo que a divis\u00e3o seja aleat\u00f3ria e control\u00e1vel via <code>random_state</code>.</li> <li>Escalabilidade: Esta fun\u00e7\u00e3o pode ser facilmente modificada para incluir mais vari\u00e1veis independentes, se necess\u00e1rio.</li> </ul>"},{"location":"evaluation/","title":"Avalia\u00e7\u00e3o","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para o m\u00f3dulo de avalia\u00e7\u00e3o do modelo de machine learning:</p>"},{"location":"evaluation/#modulo-para-avaliacao-do-modelo-de-machine-learning","title":"M\u00f3dulo para Avalia\u00e7\u00e3o do Modelo de Machine Learning","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel pela avalia\u00e7\u00e3o de um modelo de machine learning utilizando m\u00e9tricas como erro absoluto m\u00e9dio (MAE), erro quadr\u00e1tico m\u00e9dio (MSE) e coeficiente de determina\u00e7\u00e3o (R\u00b2). Ele carrega o modelo treinado, executa a avalia\u00e7\u00e3o no conjunto de teste e registra as m\u00e9tricas obtidas.</p>"},{"location":"evaluation/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"evaluation/#carregar_config","title":"<code>carregar_config</code>","text":"<pre><code>def carregar_config(config_path: str) -&gt; dict:\n    \"\"\"\n    Carrega as configura\u00e7\u00f5es do arquivo YAML.\n\n    Args:\n        config_path (str): Caminho para o arquivo de configura\u00e7\u00e3o YAML.\n\n    Returns:\n        dict: Dicion\u00e1rio com as configura\u00e7\u00f5es carregadas.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Carrega as configura\u00e7\u00f5es necess\u00e1rias do arquivo YAML especificado.</p> <p>Par\u00e2metros: - <code>config_path</code> (<code>str</code>): Caminho para o arquivo de configura\u00e7\u00e3o YAML.</p> <p>Retorno: - <code>dict</code>: Dicion\u00e1rio contendo as configura\u00e7\u00f5es carregadas.</p> <p>Exemplo de Uso:</p> <pre><code>config = carregar_config(\"config/config.yaml\")\n</code></pre>"},{"location":"evaluation/#carregar_modelo","title":"<code>carregar_modelo</code>","text":"<pre><code>def carregar_modelo(caminho_modelo: str):\n    \"\"\"\n    Carrega o modelo treinado de um arquivo.\n\n    Args:\n        caminho_modelo (str): Caminho para o arquivo do modelo.\n\n    Returns:\n        Pipeline: Modelo carregado.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Carrega um modelo de machine learning previamente treinado a partir de um arquivo.</p> <p>Par\u00e2metros: - <code>caminho_modelo</code> (<code>str</code>): Caminho para o arquivo que cont\u00e9m o modelo treinado.</p> <p>Retorno: - <code>Pipeline</code>: O modelo carregado, pronto para ser utilizado em previs\u00f5es.</p> <p>Exemplo de Uso:</p> <pre><code>modelo = carregar_modelo(\"models/modelo_treinado.joblib\")\n</code></pre>"},{"location":"evaluation/#avaliar_modelo","title":"<code>avaliar_modelo</code>","text":"<pre><code>def avaliar_modelo(modelo, X_teste, y_teste):\n    \"\"\"\n    Avalia o modelo usando o dataset de teste.\n\n    Args:\n        modelo (Pipeline): Modelo treinado.\n        X_teste (pd.DataFrame): Features do dataset de teste.\n        y_teste (pd.Series): Vari\u00e1vel alvo do dataset de teste.\n\n    Returns:\n        dict: M\u00e9tricas de avalia\u00e7\u00e3o do modelo.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Avalia o desempenho do modelo utilizando um conjunto de dados de teste e calcula as m\u00e9tricas de avalia\u00e7\u00e3o.</p> <p>Par\u00e2metros: - <code>modelo</code> (<code>Pipeline</code>): Modelo treinado que ser\u00e1 avaliado. - <code>X_teste</code> (<code>pd.DataFrame</code>): Conjunto de features do dataset de teste. - <code>y_teste</code> (<code>pd.Series</code>): Vari\u00e1vel alvo correspondente ao dataset de teste.</p> <p>Retorno: - <code>dict</code>: Um dicion\u00e1rio contendo as m\u00e9tricas de avalia\u00e7\u00e3o, incluindo:   - <code>MAE</code>: Mean Absolute Error (Erro Absoluto M\u00e9dio)   - <code>MSE</code>: Mean Squared Error (Erro Quadr\u00e1tico M\u00e9dio)   - <code>R2</code>: Coeficiente de Determina\u00e7\u00e3o (R\u00b2)</p> <p>Exemplo de Uso:</p> <pre><code>metrics = avaliar_modelo(modelo, X_teste, y_teste)\nprint(metrics)\n</code></pre>"},{"location":"evaluation/#exemplo-completo-de-uso-do-modulo","title":"Exemplo Completo de Uso do M\u00f3dulo","text":"<pre><code>if __name__ == \"__main__\":\n    config = carregar_config(\"config/config.yaml\")\n\n    logging.basicConfig(filename=config['logging']['log_file'], level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n    dados_teste = pd.read_csv(\"data/dataset_teste.csv\")\n    X_teste, y_teste, preprocessor = preprocessar_dados(dados_teste)\n    modelo = carregar_modelo(config['model']['save_path'])\n    metrics = avaliar_modelo(modelo, X_teste, y_teste)\n    for metric, value in metrics.items():\n        logging.info(f\"{metric}: {value:.4f}\")\n</code></pre> <p>Descri\u00e7\u00e3o: Este bloco de c\u00f3digo demonstra o fluxo completo de carregamento de configura\u00e7\u00f5es, carregamento do modelo, prepara\u00e7\u00e3o dos dados de teste, avalia\u00e7\u00e3o do modelo e registro das m\u00e9tricas obtidas no log.</p>"},{"location":"evaluation/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Pr\u00e9-processamento: O pr\u00e9-processamento dos dados de teste \u00e9 realizado pela fun\u00e7\u00e3o <code>preprocessar_dados</code> importada do m\u00f3dulo <code>model_first</code>.</li> <li>Configura\u00e7\u00e3o: As configura\u00e7\u00f5es para o caminho do modelo e do arquivo de log s\u00e3o carregadas de um arquivo YAML.</li> <li>M\u00e9tricas de Avalia\u00e7\u00e3o: As principais m\u00e9tricas de avalia\u00e7\u00e3o incluem MAE, MSE e R\u00b2, que fornecem uma vis\u00e3o abrangente do desempenho do modelo.</li> </ul>"},{"location":"evaluation/#configuracao-yaml-exemplo","title":"Configura\u00e7\u00e3o YAML Exemplo","text":"<p>Aqui est\u00e1 um exemplo de como o arquivo <code>config.yaml</code> poderia ser estruturado:</p> <pre><code>logging:\n  log_file: \"logs/project.log\"\n\nmodel:\n  save_path: \"models/modelo_treinado.joblib\"\n</code></pre>"},{"location":"main/","title":"Principal","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para o script principal do projeto:</p>"},{"location":"main/#script-principal-para-execucao-do-projeto","title":"Script Principal para Execu\u00e7\u00e3o do Projeto","text":"<p>Este script orquestra a execu\u00e7\u00e3o completa do projeto, desde a gera\u00e7\u00e3o dos datasets, treinamento do modelo, avalia\u00e7\u00e3o, at\u00e9 a visualiza\u00e7\u00e3o dos resultados. O script \u00e9 configurado para ser executado como um ponto de entrada principal para o pipeline de machine learning.</p>"},{"location":"main/#dependencias","title":"Depend\u00eancias","text":"<ul> <li><code>sys</code> e <code>os</code>: Usados para manipula\u00e7\u00e3o de caminhos e configura\u00e7\u00e3o do ambiente de execu\u00e7\u00e3o.</li> <li><code>logging</code>: Para registro de logs durante a execu\u00e7\u00e3o do script.</li> <li><code>data_generation</code>: M\u00f3dulo respons\u00e1vel pela gera\u00e7\u00e3o e salvamento dos datasets.</li> <li><code>model_first</code>: M\u00f3dulo respons\u00e1vel pelo carregamento, pr\u00e9-processamento dos dados, e treinamento do modelo.</li> <li><code>evaluation</code>: M\u00f3dulo respons\u00e1vel pela avalia\u00e7\u00e3o do modelo treinado.</li> <li><code>model_visualization</code>: M\u00f3dulo para visualiza\u00e7\u00e3o do desempenho do modelo.</li> </ul>"},{"location":"main/#funcao-principal","title":"Fun\u00e7\u00e3o Principal","text":""},{"location":"main/#main","title":"<code>main</code>","text":"<pre><code>def main():\n    # Carregar configura\u00e7\u00f5es\n    config = carregar_config(\"config/config.yaml\")\n\n    # Configurar logging\n    logging.basicConfig(filename=config['logging']['log_file'], level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n    # Gera\u00e7\u00e3o dos datasets\n    logging.info(\"Gerando datasets de treino e teste\")\n    dataset_treino = gerar_dataset(config['data']['num_samples'])\n    dataset_teste = gerar_dataset(int(config['data']['num_samples'] * config['data']['test_size']))\n    salvar_dataset(dataset_treino, \"data/dataset_treino.csv\")\n    salvar_dataset(dataset_teste, \"data/dataset_teste.csv\")\n\n    # Treinamento do modelo\n    logging.info(\"Treinando o modelo\")\n    dados_treino = carregar_dados(\"data/dataset_treino.csv\")\n    X_treino, y_treino, preprocessor = preprocessar_dados(dados_treino)\n    feature_names = obter_nomes_features(preprocessor, X_treino)\n    modelo = treinar_modelo(X_treino, y_treino, preprocessor, config['model']['save_path'])\n\n    # Avalia\u00e7\u00e3o do modelo\n    logging.info(\"Avaliando o modelo treinado\")\n    dados_teste = carregar_dados(\"data/dataset_teste.csv\")\n    X_teste, y_teste, preprocessor = preprocessar_dados(dados_teste)\n    modelo = carregar_modelo(config['model']['save_path'])\n    metrics = avaliar_modelo(modelo, X_teste, y_teste)\n\n    logging.info(\"M\u00e9tricas de Avalia\u00e7\u00e3o do Modelo:\")\n    for metric, value in metrics.items():\n        logging.info(f\"{metric}: {value:.4f}\")\n\n    # Visualiza\u00e7\u00e3o dos resultados\n    y_pred = modelo.predict(X_teste)\n    plot_predictions(y_teste, y_pred)\n    plot_residuals(y_teste, y_pred)\n    plot_feature_importances(modelo, feature_names)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"main/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A fun\u00e7\u00e3o <code>main()</code> coordena as etapas principais do projeto:</p> <ol> <li> <p>Carregar Configura\u00e7\u00f5es: As configura\u00e7\u00f5es s\u00e3o carregadas de um arquivo YAML, especificando par\u00e2metros como n\u00famero de amostras, tamanho do conjunto de teste, e caminhos para salvar modelos e logs.</p> </li> <li> <p>Configura\u00e7\u00e3o de Logging: Define o formato e o arquivo para o log, registrando as etapas da execu\u00e7\u00e3o do pipeline.</p> </li> <li> <p>Gera\u00e7\u00e3o dos Datasets: Cria datasets de treino e teste usando a fun\u00e7\u00e3o <code>gerar_dataset</code> e salva os arquivos CSV resultantes.</p> </li> <li> <p>Treinamento do Modelo: Carrega os dados de treino, realiza o pr\u00e9-processamento e treina um modelo de \u00e1rvore de decis\u00e3o. O modelo treinado \u00e9 salvo para uso posterior.</p> </li> <li> <p>Avalia\u00e7\u00e3o do Modelo: Avalia o modelo treinado usando o conjunto de teste e calcula m\u00e9tricas de desempenho como MAE, MSE, e R\u00b2. Essas m\u00e9tricas s\u00e3o registradas no log.</p> </li> <li> <p>Visualiza\u00e7\u00e3o dos Resultados: Gera gr\u00e1ficos para visualizar a rela\u00e7\u00e3o entre valores reais e preditos, distribui\u00e7\u00e3o dos res\u00edduos, e import\u00e2ncia das features.</p> </li> </ol>"},{"location":"main/#execucao","title":"Execu\u00e7\u00e3o","text":"<p>Este script deve ser executado como o ponto de entrada principal do projeto:</p> <pre><code>python main.py\n</code></pre> <p>Ao execut\u00e1-lo, o pipeline completo de machine learning ser\u00e1 executado, desde a gera\u00e7\u00e3o dos dados at\u00e9 a visualiza\u00e7\u00e3o dos resultados.</p>"},{"location":"main/#logs","title":"Logs","text":"<p>Os logs da execu\u00e7\u00e3o ser\u00e3o salvos no caminho especificado no arquivo <code>config.yaml</code>, permitindo o rastreamento detalhado de todas as etapas.</p>"},{"location":"main/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Modularidade: O script utiliza fun\u00e7\u00f5es de m\u00f3dulos separados, facilitando a manuten\u00e7\u00e3o e a reutiliza\u00e7\u00e3o de c\u00f3digo.</li> <li>Flexibilidade: O uso de um arquivo de configura\u00e7\u00e3o YAML permite ajustar par\u00e2metros do pipeline sem modificar o c\u00f3digo-fonte.</li> <li>Visualiza\u00e7\u00e3o: A visualiza\u00e7\u00e3o das previs\u00f5es e dos res\u00edduos fornece uma compreens\u00e3o intuitiva do desempenho do modelo.</li> </ul>"},{"location":"model_first/","title":"Modelo Primeiro","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para o m\u00f3dulo de cria\u00e7\u00e3o e treinamento do modelo de machine learning:</p>"},{"location":"model_first/#modulo-para-criacao-e-treinamento-do-modelo-de-machine-learning","title":"M\u00f3dulo para Cria\u00e7\u00e3o e Treinamento do Modelo de Machine Learning","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel por carregar as configura\u00e7\u00f5es, processar os dados, treinar um modelo de \u00e1rvore de decis\u00e3o utilizando <code>GridSearchCV</code> para otimiza\u00e7\u00e3o de hiperpar\u00e2metros, e salvar o modelo treinado.</p>"},{"location":"model_first/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"model_first/#carregar_config","title":"<code>carregar_config</code>","text":"<pre><code>def carregar_config(config_path: str) -&gt; dict:\n    \"\"\"\n    Carrega as configura\u00e7\u00f5es do arquivo YAML.\n\n    Esta fun\u00e7\u00e3o l\u00ea um arquivo YAML de configura\u00e7\u00e3o e retorna o conte\u00fado como um\n    dicion\u00e1rio Python. As configura\u00e7\u00f5es carregadas incluem par\u00e2metros necess\u00e1rios\n    para a gera\u00e7\u00e3o de dados, treinamento do modelo e configura\u00e7\u00f5es de logging.\n\n    Args:\n        config_path (str): Caminho para o arquivo de configura\u00e7\u00e3o YAML.\n\n    Returns:\n        dict: Dicion\u00e1rio com as configura\u00e7\u00f5es carregadas.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Carrega as configura\u00e7\u00f5es necess\u00e1rias a partir de um arquivo YAML.</p> <p>Par\u00e2metros: - <code>config_path</code> (<code>str</code>): Caminho para o arquivo de configura\u00e7\u00e3o YAML.</p> <p>Retorno: - <code>dict</code>: Dicion\u00e1rio contendo as configura\u00e7\u00f5es carregadas.</p> <p>Exemplo de Uso:</p> <pre><code>config = carregar_config(\"config/config.yaml\")\n</code></pre>"},{"location":"model_first/#carregar_dados","title":"<code>carregar_dados</code>","text":"<pre><code>def carregar_dados(nome_arquivo: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Carrega o dataset de um arquivo CSV.\n\n    Esta fun\u00e7\u00e3o carrega os dados de um arquivo CSV e os retorna como um DataFrame\n    do pandas. \u00c9 usado tanto para carregar dados de treino quanto de teste.\n\n    Args:\n        nome_arquivo (str): Nome do arquivo CSV.\n\n    Returns:\n        pd.DataFrame: DataFrame contendo o dataset carregado.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Carrega os dados de um arquivo CSV para um DataFrame.</p> <p>Par\u00e2metros: - <code>nome_arquivo</code> (<code>str</code>): Nome do arquivo CSV a ser carregado.</p> <p>Retorno: - <code>pd.DataFrame</code>: DataFrame contendo os dados carregados.</p> <p>Exemplo de Uso:</p> <pre><code>dados = carregar_dados(\"data/dataset_treino.csv\")\n</code></pre>"},{"location":"model_first/#preprocessar_dados","title":"<code>preprocessar_dados</code>","text":"<pre><code>def preprocessar_dados(dados: pd.DataFrame):\n    \"\"\"\n    Pr\u00e9-processa os dados do dataset.\n\n    Esta fun\u00e7\u00e3o realiza o pr\u00e9-processamento dos dados, separando as features (X)\n    da vari\u00e1vel alvo (y), e aplicando transforma\u00e7\u00f5es como escalonamento das features\n    num\u00e9ricas e codifica\u00e7\u00e3o one-hot das features categ\u00f3ricas. O pr\u00e9-processador resultante\n    \u00e9 retornado junto com os dados processados.\n\n    Args:\n        dados (pd.DataFrame): DataFrame contendo o dataset.\n\n    Returns:\n        X (pd.DataFrame): Features do dataset pr\u00e9-processadas.\n        y (pd.Series): Vari\u00e1vel alvo (pre\u00e7o).\n        preprocessor (ColumnTransformer): Pipeline de pr\u00e9-processamento.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Pr\u00e9-processa os dados, separando as features (<code>X</code>) da vari\u00e1vel alvo (<code>y</code>), e aplica transforma\u00e7\u00f5es necess\u00e1rias como escalonamento e codifica\u00e7\u00e3o one-hot.</p> <p>Par\u00e2metros: - <code>dados</code> (<code>pd.DataFrame</code>): DataFrame contendo o dataset a ser pr\u00e9-processado.</p> <p>Retorno: - <code>X</code> (<code>pd.DataFrame</code>): Features do dataset ap\u00f3s o pr\u00e9-processamento. - <code>y</code> (<code>pd.Series</code>): Vari\u00e1vel alvo. - <code>preprocessor</code> (<code>ColumnTransformer</code>): Pipeline de pr\u00e9-processamento.</p> <p>Exemplo de Uso:</p> <pre><code>X, y, preprocessor = preprocessar_dados(dados)\n</code></pre>"},{"location":"model_first/#treinar_modelo","title":"<code>treinar_modelo</code>","text":"<pre><code>def treinar_modelo(X, y, preprocessor, save_path: str) -&gt; Pipeline:\n    \"\"\"\n    Treina o modelo de \u00e1rvore de decis\u00e3o utilizando GridSearchCV para otimiza\u00e7\u00e3o de hiperpar\u00e2metros.\n\n    Esta fun\u00e7\u00e3o configura um pipeline que combina o pr\u00e9-processamento dos dados com\n    o modelo de \u00e1rvore de decis\u00e3o. Em seguida, realiza a busca pelos melhores hiperpar\u00e2metros\n    utilizando o GridSearchCV. Ap\u00f3s encontrar o melhor modelo, ele \u00e9 salvo no caminho especificado.\n\n    Args:\n        X (pd.DataFrame): Features do dataset.\n        y (pd.Series): Vari\u00e1vel alvo (pre\u00e7o).\n        preprocessor (ColumnTransformer): Pipeline de pr\u00e9-processamento.\n        save_path (str): Caminho para salvar o modelo treinado.\n\n    Returns:\n        Pipeline: Modelo treinado com os melhores hiperpar\u00e2metros.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Treina um modelo de \u00e1rvore de decis\u00e3o utilizando <code>GridSearchCV</code> para otimiza\u00e7\u00e3o de hiperpar\u00e2metros. O modelo final \u00e9 salvo no caminho especificado.</p> <p>Par\u00e2metros: - <code>X</code> (<code>pd.DataFrame</code>): Features do dataset. - <code>y</code> (<code>pd.Series</code>): Vari\u00e1vel alvo. - <code>preprocessor</code> (<code>ColumnTransformer</code>): Pipeline de pr\u00e9-processamento dos dados. - <code>save_path</code> (<code>str</code>): Caminho para salvar o modelo treinado.</p> <p>Retorno: - <code>Pipeline</code>: Pipeline contendo o melhor modelo treinado.</p> <p>Exemplo de Uso:</p> <pre><code>modelo = treinar_modelo(X, y, preprocessor, \"models/melhor_modelo.joblib\")\n</code></pre>"},{"location":"model_first/#obter_nomes_features","title":"<code>obter_nomes_features</code>","text":"<pre><code>def obter_nomes_features(preprocessor, X) -&gt; list:\n    \"\"\"\n    Ajusta o pr\u00e9-processador e obt\u00e9m os nomes das features ap\u00f3s o pr\u00e9-processamento.\n\n    Esta fun\u00e7\u00e3o ajusta o pr\u00e9-processador aos dados de entrada e extrai os nomes\n    das features que resultam do pr\u00e9-processamento, incluindo tanto as features num\u00e9ricas\n    quanto as features categ\u00f3ricas codificadas.\n\n    Args:\n        preprocessor (ColumnTransformer): Pipeline de pr\u00e9-processamento.\n        X (pd.DataFrame): DataFrame de features.\n\n    Returns:\n        list: Lista com os nomes das features ap\u00f3s o pr\u00e9-processamento.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Ajusta o pr\u00e9-processador aos dados e retorna uma lista com os nomes das features resultantes, incluindo features categ\u00f3ricas codificadas.</p> <p>Par\u00e2metros: - <code>preprocessor</code> (<code>ColumnTransformer</code>): Pipeline de pr\u00e9-processamento. - <code>X</code> (<code>pd.DataFrame</code>): Features que ser\u00e3o ajustadas no pr\u00e9-processador.</p> <p>Retorno: - <code>list</code>: Lista com os nomes das features ap\u00f3s o pr\u00e9-processamento.</p> <p>Exemplo de Uso:</p> <pre><code>nomes_features = obter_nomes_features(preprocessor, X)\n</code></pre>"},{"location":"model_first/#exemplo-completo-de-uso-do-modulo","title":"Exemplo Completo de Uso do M\u00f3dulo","text":"<pre><code>if __name__ == \"__main__\":\n    # Carregar configura\u00e7\u00f5es do arquivo YAML\n    config = carregar_config(\"config/config.yaml\")\n\n    # Configurar logging com base nas configura\u00e7\u00f5es carregadas\n    logging.basicConfig(filename=config['logging']['log_file'], level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n    # Carregar e pr\u00e9-processar os dados de treino\n    dados_treino = carregar_dados(\"data/dataset_treino.csv\")\n    X_treino, y_treino, preprocessor = preprocessar_dados(dados_treino)\n\n    # Ajustar o pr\u00e9-processador e obter os nomes das features\n    feature_names = obter_nomes_features(preprocessor, X_treino)\n\n    # Treinar o modelo e salvar o melhor modelo encontrado\n    modelo = treinar_modelo(X_treino, y_treino, preprocessor, config['model']['save_path'])\n    logging.info(f\"Nomes das features: {feature_names}\")\n</code></pre> <p>Descri\u00e7\u00e3o: Este bloco de c\u00f3digo demonstra o fluxo completo desde o carregamento das configura\u00e7\u00f5es, pr\u00e9-processamento dos dados, at\u00e9 o treinamento e salvamento do modelo.</p>"},{"location":"model_first/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Otimiza\u00e7\u00e3o: O uso de <code>GridSearchCV</code> permite a otimiza\u00e7\u00e3o dos hiperpar\u00e2metros do modelo de \u00e1rvore de decis\u00e3o.</li> <li>Configura\u00e7\u00e3o: Todas as configura\u00e7\u00f5es necess\u00e1rias s\u00e3o carregadas de um arquivo YAML, permitindo flexibilidade.</li> <li>Logging: O m\u00f3dulo registra as etapas importantes do fluxo, facilitando o rastreamento e a depura\u00e7\u00e3o.</li> </ul>"},{"location":"model_first/#configuracao-yaml-exemplo","title":"Configura\u00e7\u00e3o YAML Exemplo","text":"<p>Aqui est\u00e1 um exemplo de como o arquivo <code>config.yaml</code> poderia ser estruturado:</p> <pre><code>logging:\n  log_file: \"logs/project.log\"\n\nmodel:\n  save_path: \"models/melhor_modelo.joblib\"\n</code></pre>"},{"location":"model_visualization/","title":"Visualiza\u00e7\u00e3o de Modelos","text":"<p>Aqui est\u00e1 a documenta\u00e7\u00e3o em formato Markdown para o m\u00f3dulo de visualiza\u00e7\u00e3o do desempenho do modelo:</p>"},{"location":"model_visualization/#modulo-para-visualizacao-do-desempenho-do-modelo","title":"M\u00f3dulo para Visualiza\u00e7\u00e3o do Desempenho do Modelo","text":"<p>Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para visualizar o desempenho de um modelo de machine learning, incluindo a compara\u00e7\u00e3o entre valores reais e preditos, an\u00e1lise de res\u00edduos, e visualiza\u00e7\u00e3o da import\u00e2ncia das features.</p>"},{"location":"model_visualization/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"model_visualization/#plot_predictions","title":"<code>plot_predictions</code>","text":"<pre><code>def plot_predictions(y_true, y_pred):\n    \"\"\"\n    Plota os valores reais versus os valores preditos.\n\n    Args:\n        y_true (pd.Series): Valores reais.\n        y_pred (pd.Series): Valores preditos.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Plota uma dispers\u00e3o dos valores reais contra os valores preditos pelo modelo, juntamente com uma linha de perfei\u00e7\u00e3o (onde <code>y_true</code> \u00e9 igual a <code>y_pred</code>).</p> <p>Par\u00e2metros: - <code>y_true</code> (<code>pd.Series</code>): Valores reais da vari\u00e1vel alvo. - <code>y_pred</code> (<code>pd.Series</code>): Valores preditos pelo modelo.</p> <p>Exemplo de Uso:</p> <pre><code>plot_predictions(y_test, y_pred)\n</code></pre>"},{"location":"model_visualization/#plot_residuals","title":"<code>plot_residuals</code>","text":"<pre><code>def plot_residuals(y_true, y_pred):\n    \"\"\"\n    Plota os res\u00edduos (erros) do modelo.\n\n    Args:\n        y_true (pd.Series): Valores reais.\n        y_pred (pd.Series): Valores preditos.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Plota a distribui\u00e7\u00e3o dos res\u00edduos, que s\u00e3o as diferen\u00e7as entre os valores reais e preditos. Um histograma com uma linha KDE \u00e9 usado para visualizar a distribui\u00e7\u00e3o dos res\u00edduos.</p> <p>Par\u00e2metros: - <code>y_true</code> (<code>pd.Series</code>): Valores reais da vari\u00e1vel alvo. - <code>y_pred</code> (<code>pd.Series</code>): Valores preditos pelo modelo.</p> <p>Exemplo de Uso:</p> <pre><code>plot_residuals(y_test, y_pred)\n</code></pre>"},{"location":"model_visualization/#plot_feature_importances","title":"<code>plot_feature_importances</code>","text":"<pre><code>def plot_feature_importances(model, feature_names):\n    \"\"\"\n    Plota a import\u00e2ncia das features do modelo.\n\n    Args:\n        model (Pipeline): Modelo treinado.\n        feature_names (list): Lista com os nomes das features.\n    \"\"\"\n</code></pre> <p>Descri\u00e7\u00e3o: Plota a import\u00e2ncia das features usadas pelo modelo de \u00e1rvore de decis\u00e3o, ordenando-as por sua import\u00e2ncia.</p> <p>Par\u00e2metros: - <code>model</code> (<code>Pipeline</code>): Pipeline do modelo treinado, que deve conter um regressor com atributo <code>feature_importances_</code>. - <code>feature_names</code> (<code>list</code>): Lista com os nomes das features, na mesma ordem que foram usadas para treinar o modelo.</p> <p>Exemplo de Uso:</p> <pre><code>plot_feature_importances(model, feature_names)\n</code></pre>"},{"location":"model_visualization/#exemplo-completo-de-uso-do-modulo","title":"Exemplo Completo de Uso do M\u00f3dulo","text":"<pre><code># Supondo que y_test e y_pred sejam os valores reais e preditos, respectivamente\nplot_predictions(y_test, y_pred)\n\n# Plote os res\u00edduos\nplot_residuals(y_test, y_pred)\n\n# Plote a import\u00e2ncia das features (feature_names deve ser uma lista com os nomes das features)\nplot_feature_importances(model, feature_names)\n</code></pre>"},{"location":"model_visualization/#consideracoes","title":"Considera\u00e7\u00f5es","text":"<ul> <li>Visualiza\u00e7\u00e3o de Desempenho: As fun\u00e7\u00f5es de plotagem fornecem uma maneira visual de entender o desempenho do modelo e identificar poss\u00edveis \u00e1reas de melhoria.</li> <li>Import\u00e2ncia das Features: A import\u00e2ncia das features ajuda a identificar quais vari\u00e1veis est\u00e3o contribuindo mais para as previs\u00f5es do modelo.</li> <li>Personaliza\u00e7\u00e3o: As fun\u00e7\u00f5es de plotagem s\u00e3o facilmente personaliz\u00e1veis, permitindo ajustes nos estilos e formatos de gr\u00e1ficos conforme necess\u00e1rio.</li> </ul>"},{"location":"model_visualization/#dependencias","title":"Depend\u00eancias","text":"<ul> <li><code>matplotlib</code>: Usado para a cria\u00e7\u00e3o de gr\u00e1ficos e visualiza\u00e7\u00f5es.</li> <li><code>seaborn</code>: Usado para a cria\u00e7\u00e3o de gr\u00e1ficos estat\u00edsticos, como a distribui\u00e7\u00e3o de res\u00edduos.</li> </ul>"}]}